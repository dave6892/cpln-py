[project]
name = "cpln-py"
dynamic = ["version"]
description = "A Python library for the Control Plane API"
authors = [
    {name = "dave6892", email = "dave6892@gmail.com"},
]
readme = "README.md"
license = { text = "Apache License 2.0" }
classifiers = [
	"Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

requires-python = "<3.14,>=3.9"

dependencies = [
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
    "websocket-client>=1.8.0",
    "urllib3<2.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "requests-mock>=1.12.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocstrings[python]>=0.29.1",
]
lint = [
    "flake8>=7.2.0",
    "black>=25.1.0",
    "mypy>=1.9.0",
    "types-requests>=2.31.0.1",
]

[tool.mypy]
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true


[tool.pdm]
distribution = true
package-dir = "src/cpln"
include = ["py.typed"]

[tool.pdm.version]
source = "scm"
write_to = "cpln/_version.py"
write_template = "__version__ = '{}'"
version_format = "src.version:format_version"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "requests-mock>=1.12.1",
    "black>=25.1.0",
    "flake8>=7.2.0",
    "mkdocs>=1.6.1",
    "mkdocstrings-python>=1.16.12",
    "mkdocs-autorefs>=1.4.2",
    "mypy>=1.9.0",
    "types-requests>=2.31.0.1",
    "ruff>=0.11.12",
    "pre-commit>=4.2.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]

ignore = [
    "E501",  # Line too long (handled by formatter)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["your_package_name"]  # Replace with your package name